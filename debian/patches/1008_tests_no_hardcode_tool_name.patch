--- a/tests/test_other.py
+++ b/tests/test_other.py
@@ -7078,7 +7078,7 @@
     self.assertContained('emcc: error: cannot write output file `.`: Is a directory', ret)
 
     ret = self.expect_fail([EMCC, test_file('hello_world.c'), '-o', '.', '--oformat=wasm'])
-    self.assertContained('wasm-ld: error: cannot open output file .:', ret)
+    self.assertContained('error: cannot open output file .:', ret)
     # Linux/Mac and Windows's error messages are slightly different
     self.assertContained(['Is a directory', 'is a directory'], ret)
 
@@ -7678,7 +7678,7 @@
   def test_error_on_missing_libraries(self):
     # -llsomenonexistingfile is an error by default
     err = self.expect_fail([EMXX, test_file('hello_world.cpp'), '-lsomenonexistingfile'])
-    self.assertContained('wasm-ld: error: unable to find library -lsomenonexistingfile', err)
+    self.assertContained('error: unable to find library -lsomenonexistingfile', err)
 
   # Tests that if user accidentally attempts to link native object code, we show an error
   def test_native_link_error_message(self):
@@ -7696,7 +7696,7 @@
         }
       ''')
     err = self.expect_fail([EMXX, 'src.cpp', '-sTOTAL_STACK=1KB', '-sINITIAL_MEMORY=64KB'])
-    self.assertContained('wasm-ld: error: initial memory too small', err)
+    self.assertContained('error: initial memory too small', err)
 
   def test_o_level_clamp(self):
     for level in [3, 4, 20]:
@@ -10059,10 +10059,10 @@
 
   def test_linker_flags_pass_through(self):
     err = self.expect_fail([EMXX, test_file('hello_world.cpp'), '-Wl,--waka'])
-    self.assertContained('wasm-ld: error: unknown argument: --waka', err)
+    self.assertContained('error: unknown argument: --waka', err)
 
     err = self.expect_fail([EMXX, test_file('hello_world.cpp'), '-Xlinker', '--waka'])
-    self.assertContained('wasm-ld: error: unknown argument: --waka', err)
+    self.assertContained('error: unknown argument: --waka', err)
 
   def test_linker_flags_unused(self):
     err = self.run_process([EMXX, test_file('hello_world.cpp'), '-c', '-lbar'], stderr=PIPE).stderr
@@ -10356,7 +10356,7 @@
   def test_lld_report_undefined(self):
     create_file('main.c', 'void foo(); int main() { foo(); return 0; }')
     stderr = self.expect_fail([EMCC, '-sLLD_REPORT_UNDEFINED', 'main.c'])
-    self.assertContained('wasm-ld: error:', stderr)
+    self.assertContained('error:', stderr)
     self.assertContained('main_0.o: undefined symbol: foo', stderr)
 
   def test_lld_report_undefined_reverse_deps(self):
